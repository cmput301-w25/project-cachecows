rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
  	
    match /conversations/{conversationId} {
      allow read: if request.auth != null && 
                   request.auth.uid in resource.data.participants;
      allow write: if request.auth != null && 
                   request.auth.uid in request.resource.data.participants;
    }

    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if request.auth != null && 
                   request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.senderId;
    }

    // Username availability checks
    match /usernames/{username} {
      allow read: if true; // Anyone can check if a username is available
      allow write: if request.auth != null && request.resource.data.uid == request.auth.uid; // Only the authenticated user can write their own username
      allow create: if request.auth != null && 
              request.resource.data.uid == request.auth.uid;
allow update, delete: if request.auth != null && 
                     (request.auth.uid == resource.data.uid || 
                      request.auth.uid == request.resource.data.uid);
    }

    // User profile security
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;

      // Subcollections for following and followers
      match /following/{followingUserId} {
        // Allow read and write only if the user is accessing their own following list
        allow read, write: if request.auth != null;
      }

      match /followers/{followerUserId} {
        // Allow read and write only if the user is accessing their own followers list
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
      
    }
    
    match /follow_requests/{requestId} {
  		allow create: if request.auth != null;
  		allow read: if request.auth != null && 
    		(request.auth.uid == resource.data.receiverId || request.auth.uid == resource.data.senderId);
  		allow update: if request.auth != null && request.auth.uid == resource.data.receiverId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
		}	
    
    match /mood_events/{eventId}/comments/{commentId} {
  		allow read, create: if request.auth != null && 
      (request.auth.uid == get(/databases/$(database)/documents/mood_events/$(eventId)).data.userId ||
      exists(/databases/$(database)/documents/users/$(get(/databases/$(database)/documents/mood_events/$(eventId)).data.userId)/followers/$(request.auth.uid)))
}

      // Mood events security
    match /mood_events/{event} {
      // Allow read if the user is authenticated
      allow read: if request.auth != null;

      // Allow write (create/update/delete) only if the user is authenticated and owns the mood event
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                  request.auth.uid == resource.data.receiverId;
      allow create: if request.auth != null && 
                    request.resource.data.senderId == request.auth.uid;
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.receiverId || 
                     request.auth.uid == resource.data.senderId);
}
    
  }
}
